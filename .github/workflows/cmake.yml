name: CMake Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            suffix: so
          - os: macos-latest
            suffix: dylib
          - os: macos-latest
            suffix: pyd

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            sudo apt-get update
            sudo apt install curl
            sudo apt install libssl-dev
            sudo apt-get install -y libcurl4-openssl-dev
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            brew install curl
          else
            choco install curl
            choco install openssl
          fi

      - name: Set up Python 3.11
        uses: actions/setup-python@v2
        with:
          python-version: "3.11"

      - name: Create Build Environment
        run: cmake -E make_directory ${{runner.workspace}}/build

      - name: Configure CMake
        shell: bash
        run: cmake $GITHUB_WORKSPACE -B ${{runner.workspace}}/build

      - name: Build
        working-directory: ${{runner.workspace}}/build
        shell: bash
        run: cmake --build . --config Release

      - name: Upload Artifact Shared
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ matrix.os }}-${{ matrix.suffix }}
          path: ${{runner.workspace}}/build/libtoken_granter_shared.${{ matrix.suffix }}

      - name: Upload Artifact Pybindings
        uses: actions/upload-artifact@v2
        with:
          name: library-${{ matrix.os }}-${{ matrix.suffix }}
          path: ${{runner.workspace}}/TokenGranterWrapper/token_granter_wrapper/token_granter.*.so

      - name: Install Packages
        run: python -m pip install cibuildwheel twine build

      - name: Clean project directory
        run: find . -path ./include -prune -o -type f \( -name "*.so" -o -name "*.c" -o -name "*.o" \) -exec rm -f {} \;

      - name: Build wheels
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Linux" ]]; then
            echo "cat /etc/os-release" > prebuild.sh
          elif [[ "${{ runner.os }}" == "macOS" ]]; then
            echo "brew install curl" > prebuild.sh
          elif [[ "${{ runner.os }}" == "Windows" ]]; then
            echo "choco install curl" > prebuild.sh
          fi
          chmod +x prebuild.sh
          platform=$(echo ${{ runner.os }} | tr '[:upper:]' '[:lower:]')
          python -m cibuildwheel --platform $platform --output-dir wheelhouse
        env:
          CIBW_BEFORE_BUILD: "./prebuild.sh"
          CIBW_SKIP: cp38-* cp39-* cp310-* cp311=* cp312=* *_manylinux*
          CIBW_BUILD: cp311*

      - name: Publish to PyPI
        run: python -m twine upload --repository-url https://pypi.ghaz.dev:440 wheelhouse/*.whl --verbose
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
